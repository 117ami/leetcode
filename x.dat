🕐🕑🕒🕓🕔🕕🕖🕗🕘🕙🕚🕛🕜🕝🕞🕟🕠🕡🕢🕣🕤🕥🕦🕧{
  submissionData: {
    
    status_code: parseInt('20', 10),
    runtime: 'N/A',
    memory: 'N/A',
    
      total_correct : '0',
    
    
    
    
    
      compile_error : 'Line 82: Char 5: error: use of undeclared identifier \u0027say\u0027\u000A    say(ints)\u003B\u000A    ^\u000A1 error generated.',
    
    
    
    
  },
  questionId: '592',
  sessionId: '1707963',
  getLangDisplay: 'cpp',
  submissionCode: '/*\u000A * @lc app\u003Dleetcode id\u003D592 lang\u003Dcpp\u000A *\u000A * [592] Fraction Addition and Subtraction\u000A *\u000A * https://leetcode.com/problems/fraction\u002Daddition\u002Dand\u002Dsubtraction/description/\u000A *\u000A * algorithms\u000A * Medium (49.00%)\u000A * Total Accepted:    18.3K\u000A * Total Submissions: 37.3K\u000A * Testcase Example:  \u0027\u002D1/2+1/2\u0027\u000A *\u000A * Given a string representing an expression of fraction addition and\u000A * subtraction, you need to return the calculation result in string format. The\u000A * final result should be irreducible fraction. If your final result is an\u000A * integer, say 2, you need to change it to the format of fraction that has\u000A * denominator 1. So in this case, 2 should be converted to 2/1.\u000A *\u000A * Example 1:\u000A *\u000A * Input:\u002D1/2+1/2\u000A * Output: 0/1\u000A *\u000A *\u000A *\u000A * Example 2:\u000A *\u000A * Input:\u002D1/2+1/2+1/3\u000A * Output: 1/3\u000A *\u000A *\u000A *\u000A * Example 3:\u000A *\u000A * Input:1/3\u002D1/2\u000A * Output: \u002D1/6\u000A *\u000A *\u000A *\u000A * Example 4:\u000A *\u000A * Input:5/3+1/3\u000A * Output: 2/1\u000A *\u000A *\u000A *\u000A * Note:\u000A *\u000A * The input string only contains \u00270\u0027 to \u00279\u0027, \u0027/\u0027, \u0027+\u0027 and \u0027\u002D\u0027. So does the\u000A * output.\u000A * Each fraction (input and output) has format ±numerator/denominator. If the\u000A * first input fraction or the output is positive, then \u0027+\u0027 will be omitted.\u000A * The input only contains valid irreducible fractions, where the numerator and\u000A * denominator of each fraction will always be in the range [1,10]. If the\u000A * denominator is 1, it means this fraction is actually an integer in a\u000A * fraction format defined above.\u000A * The number of given fractions will be in the range [1,10].\u000A * The numerator and denominator of the final result are guaranteed to be valid\u000A * and in the range of 32\u002Dbit int.\u000A *\u000A *\u000A */\u000Aclass Solution {\u000Apublic:\u000A  string fractionAddition(string expression) {\u000A      if (expression.empty()) return 0/1\u003B\u000A    vector\u003Cint\u003E ints\u003B\u000A    for (int i \u003D 0\u003B i \u003C expression.size()\u003B) {\u000A      int j \u003D i\u003B\u000A      while (j \u003C expression.size() \u0026\u0026 isdigit(expression[j]))\u000A        j++\u003B\u000A      if (j \u003E i) {\u000A        //  say(expression.substr(i, j\u002Di))\u003B\u000A        int cint \u003D std::stoi(expression.substr(i, j \u002D i))\u003B\u000A        cint \u003D expression[i \u002D 1] \u003D\u003D \u0027\u002D\u0027 ? cint * \u002D1 : cint\u003B\u000A        ints.emplace_back(cint)\u003B\u000A        i \u003D j\u003B\u000A      } else\u000A        i++\u003B\u000A    }\u000A    say(ints)\u003B\u000A    int a \u003D 0, b \u003D 1\u003B\u000A    for (int i \u003D 0\u003B i \u003C ints.size()\u003B i +\u003D 2) {\u000A      int c \u003D ints[i], d \u003D ints[i + 1]\u003B\u000A      a \u003D a * d + b * c\u003B\u000A      b \u003D b * d\u003B\u000A      int g \u003D std::gcd(a, b)\u003B\u000A      a /\u003D g, b /\u003D g\u003B\u000A    }\u000A    // say(vector\u003Cint\u003E{a, b})\u003B\u000A    return to_string(a) + / + to_string(b)\u003B\u000A    return \u003B\u000A  }\u000A}\u003B\u000A\u000Aauto speed_up \u003D []() {\u000A  ios_base::sync_with_stdio(false)\u003B\u000A  return 0\u003B\u000A}()\u003B\u000A',
  editCodeUrl: '/problems/fraction-addition-and-subtraction/',
  checkUrl: '/submissions/detail/380639435/check/',
  runtimeDistributionFormatted: '{lang: cpp, distribution: [[0, 65.534]]}',
  memoryDistributionFormatted: '{lang: cpp, distribution: [[5840, 0.4854], [5936, 0.4854], [5940, 0.4854], [5952, 0.9709], [5960, 0.9709], [5964, 0.4854], [5968, 0.9709], [5972, 0.4854], [5976, 0.9709], [5980, 0.4854], [5984, 1.4563], [5988, 0.9709], [5992, 1.4563], [5996, 0.9709], [6000, 1.4563], [6004, 1.9417], [6008, 1.9417], [6012, 2.4272], [6016, 0.4854], [6020, 0.4854], [6024, 0.9709], [6028, 1.4563], [6032, 0.9709], [6036, 0.4854], [6040, 0.9709], [6044, 3.3981], [6048, 1.4563], [6052, 0.4854], [6056, 0.9709], [6060, 1.4563], [6064, 0.9709], [6068, 1.9417], [6072, 0.9709], [6076, 2.4272], [6080, 3.8835], [6084, 0.9709], [6088, 1.9417], [6092, 0.9709], [6096, 0.9709], [6100, 0.4854], [6104, 1.4563], [6108, 1.4563], [6112, 0.4854], [6116, 0.9709], [6120, 0.9709], [6128, 0.4854], [6132, 0.4854], [6140, 0.9709], [6144, 0.4854], [6152, 0.4854], [6156, 1.4563], [6160, 0.4854], [6164, 0.4854], [6168, 0.9709], [6172, 0.4854], [6176, 1.4563], [6180, 0.4854], [6184, 0.4854], [6188, 1.4563], [6192, 0.9709], [6196, 1.4563], [6200, 0.4854], [6204, 0.4854], [6208, 1.9417], [6212, 1.4563], [6216, 0.4854], [6220, 0.9709], [6224, 0.9709], [6228, 1.4563], [6232, 0.9709], [6236, 2.4272], [6240, 1.9417], [6244, 0.4854], [6248, 0.9709], [6252, 0.4854], [6256, 1.4563], [6260, 0.9709], [6264, 1.9417], [6268, 1.4563], [6276, 0.4854], [6280, 0.4854], [6284, 0.4854], [6288, 0.4854], [6292, 0.9709], [6296, 0.4854], [6308, 0.4854], [6316, 0.4854], [6324, 0.4854], [6332, 0.9709], [6336, 0.4854]]}',
  langs: [
    
  ],
  runtime: '0',
  memory: '0',
  enableMemoryDistribution: 'True',
  nonSufficientMsg: 'Sorry. We do not have enough accepted submissions to show distribution chart.'
}
input:        []
output:       []
expected:     []
compile error:        ["'Line 82: Char 5: error: use of undeclared identifier \\u0027say\\u0027\\u000A    say(ints)\\u003B\\u000A    ^\\u000A1 error generated.'"]
