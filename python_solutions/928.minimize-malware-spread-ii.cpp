/*
 * @lc app=leetcode id=928 lang=cpp
 *
 * [928] Minimize Malware Spread II
 *
 * https://leetcode.com/problems/minimize-malware-spread-ii/description/
 *
 * algorithms
 * Hard (40.55%)
 * Total Accepted:    9.6K
 * Total Submissions: 23.6K
 * Testcase Example:  '[[1,1,0],[1,1,0],[0,0,1]]\n[0,1]'
 *
 * (This problem is the same as Minimize Malware Spread, with the differences
 * bolded.)
 *
 * In a network of nodes, each node i is directly connected to another node j
 * if and only if graph[i][j] = 1.
 *
 * Some nodes initial are initially infected by malware.  Whenever two nodes
 * are directly connected and at least one of those two nodes is infected by
 * malware, both nodes will be infected by malware.  This spread of malware
 * will continue until no more nodes can be infected in this manner.
 *
 * Suppose M(initial) is the final number of nodes infected with malware in the
 * entire network, after the spread of malware stops.
 *
 * We will remove one node from the initial list, completely removing it and
 * any connections from this node to any other node.  Return the node that if
 * removed, would minimize M(initial).  If multiple nodes could be removed to
 * minimize M(initial), return such a node with the smallest index.
 *
 *
 *
 *
 *
 *
 *
 * Example 1:
 *
 *
 * Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 * Output: 0
 *
 *
 *
 * Example 2:
 *
 *
 * Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
 * Output: 1
 *
 *
 *
 * Example 3:
 *
 *
 * Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
 * Output: 1
 *
 *
 *
 *
 * Note:
 *
 *
 * 1 < graph.length = graph[0].length <= 300
 * 0 <= graph[i][j] == graph[j][i] <= 1
 * graph[i][i] = 1
 * 1 <= initial.length < graph.length
 * 0 <= initial[i] < graph.length
 *
 *
 *
 *
 */
#include <set>
#include <vector>

class Solution {
public:
  int max_survivor(vector<vector<int>> &g, vector<int> &initial, int node) {
    unordered_set<int> dead(initial.begin(), initial.end());
    dead.erase(node);
    int dead_size = 0;
    while (dead.size() != dead_size) {
      dead_size = dead.size();
      for (auto u : dead) 
        dead.insert(g[u].begin(), g[u].end());
      
      if (dead.find(node) != dead.end())
        dead.erase(node);
    }
    say(node);
    say(dead);
    say(dead.size());
    say(g.size());
    return g.size() - dead_size; 
  }

  int minMalwareSpread(vector<vector<int>> &graph, vector<int> &initial) {
    int size = graph.size();
    vector<vector<int>> g(size);

    for (int i = 0; i < size; i++)
      for (int j = i + 1; j < size; j++)
        if (graph[i][j])
          g[i].emplace_back(j), g[j].emplace_back(i);

    int max = 0, res = 0;
    sort(initial.begin(), initial.end());
    for (auto i : initial) {
      say(g.size());
      int ms = max_survivor(g, initial, i);
      // say(vector<int>{i, ms});
      if (ms > max)
        res = i, max = ms;
    }
    return res;
  }
};

auto speed_up = []() {
  ios_base::sync_with_stdio(false);
  return 0;
}();
